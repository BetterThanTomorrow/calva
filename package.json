{
    "name": "calva",
    "displayName": "Calva: Clojure & Clojurescript Interactive Programming",
    "description": "Integrated REPL, formatter, Paredit, and more. Powered by nREPL.",
    "icon": "assets/calva.png",
    "version": "2.0.42",
    "publisher": "betterthantomorrow",
    "author": {
        "name": "Better Than Tomorrow",
        "email": "pez@pezius.com"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/BetterThanTomorrow/calva.git"
    },
    "license": "MIT",
    "engines": {
        "vscode": "^1.30.0"
    },
    "categories": [
        "Programming Languages",
        "Formatters",
        "Linters",
        "Other"
    ],
    "keywords": [
        "Clojure",
        "CLojureScript",
        "Cider",
        "REPL",
        "Formatting",
        "Pretty",
        "EDN",
        "Interactive Programming"
    ],
    "galleryBanner": {
        "color": "#EFEFEF",
        "theme": "light"
    },
    "badges": [
        {
            "url": "https://img.shields.io/badge/clojurians-calva--dev-blue.svg?logo=slack",
            "href": "https://clojurians.slack.com/messages/calva-dev/",
            "description": "Let's talk in the #calva-dev channel at the Clojurians Slack"
        }
    ],
    "activationEvents": [
        "onLanguage:clojure",
        "onCommand:calva.jackIn",
        "onCommand:calva.jackInOrConnect",
        "onCommand:calva.connect",
        "onCommand:calva.connectNonProjectREPL"
    ],
    "main": "./out/extension",
    "extensionPack": [
        "tonsky.clojure-warrior"
    ],
    "contributes": {
        "languages": [
            {
                "id": "clojure",
                "aliases": [
                    "Clojure",
                    "clojure"
                ],
                "extensions": [
                    ".clj",
                    ".cljs",
                    ".cljc",
                    ".cljx",
                    ".clojure",
                    ".edn",
                    ".joke",
                    ".boot"
                ]
            }
        ],
        "grammars": [
            {
                "language": "clojure",
                "scopeName": "source.clojure",
                "path": "./clojure.tmLanguage.json"
            }
        ],
        "configurationDefaults": {
            "[clojure]": {
                "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]`",
                "editor.autoClosingBrackets": "always",
                "editor.autoClosingQuotes": "always",
                "editor.formatOnType": true,
                "editor.autoIndent": true,
                "editor.formatOnPaste": true,
                "files.trimTrailingWhitespace": false,
                "editor.matchBrackets": false
            }
        },
        "configuration": [
            {
                "type": "object",
                "title": "Calva",
                "properties": {
                    "calva.prettyPrint": {
                        "type": "boolean",
                        "default": true,
                        "description": "Pretty print evaluations"
                    },
                    "clojure.format.enable": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enable/disable calva-fmt as Clojure formatter"
                    },
                    "calva.evalOnSave": {
                        "type": "boolean",
                        "default": false,
                        "description": "Run load-file when opening a new file and on file save"
                    },
                    "calva.lintOnSave": {
                        "type": "boolean",
                        "default": false,
                        "description": "Run joker-linting when opening a new file and on file save"
                    },
                    "calva.testOnSave": {
                        "type": "boolean",
                        "default": false,
                        "description": "Run namespace tests when opening a new file and on file save"
                    },
                    "calva.syncReplNamespaceToCurrentFile": {
                        "type": "boolean",
                        "default": false,
                        "description": "Keeps the REPL window's namespace in sync with the current file (if it has a valid Clojure namespace form)"
                    },
                    "calva.statusColor": {
                        "type": "object",
                        "default": {},
                        "description": "Configuration for custom coloring of the statusbar.",
                        "properties": {
                            "disconnectedColor": {
                                "type": "string",
                                "default": "#c0c0c0",
                                "pattern": "#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})",
                                "description": "Foreground color for the disconnected status"
                            },
                            "launchingColor": {
                                "type": "string",
                                "default": "#fdd023",
                                "pattern": "#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})",
                                "description": "Foreground color for the launching status"
                            },
                            "connectedSatusColor": {
                                "type": "string",
                                "default": "#fdd023",
                                "pattern": "#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})",
                                "description": "Foreground color for the connected status"
                            },
                            "typeStatusColor": {
                                "type": "string",
                                "default": "#91dc47",
                                "pattern": "#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})",
                                "description": "Foreground color for the type status"
                            }
                        }
                    },
                    "calva.customCljsRepl": {
                        "deprecationMessage": "This settings is deprecated. Use `cljsType` in a `calva.replConnectSequences` item instead.",
                        "type": "object",
                        "default": null,
                        "description": "Configuration for custom any CLJS REPL type your project may use",
                        "$schema": "http://json-schema.org/draft-06/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "default": "My Custom CLJS REPL",
                                "description": "Name of your custom config (used in picker menus)"
                            },
                            "startCode": {
                                "type": "string",
                                "description": "Clojure code that starts the CLJS REPL"
                            },
                            "tellUserToStartRegExp": {
                                "type": "string",
                                "description": "When this pattern is matched in the stdout of the `startCode`, Calva will instruct the user to start the cljs app (so that Calva can connect)."
                            },
                            "printThisLineRegExp": {
                                "type": "string",
                                "description": "Any lines in the stdout of `startCode` matching this regexp will be printed to `Calva says`. One use for it is to help the user know how to start the cljs app."
                            },
                            "connectedRegExp": {
                                "type": "string",
                                "default": "To quit, type: :cljs/quit",
                                "description": "A pattern/string that Calva can look for in the stdout of the `startCode` to determine when the REPL is connected. (The default often works well)"
                            }
                        },
                        "required": [
                            "name",
                            "startCode",
                            "connectedRegExp"
                        ]
                    },
                    "calva.jokerPath": {
                        "type": "string",
                        "default": "joker",
                        "description": "Sets the path in which the Joker executable can be found. If useWSL has been set to true, this should be a valid WSL path."
                    },
                    "calva.useWSL": {
                        "type": "boolean",
                        "default": false,
                        "description": "Specifies if the nREPL and Joker are running within WSL."
                    },
                    "calva.jackInEnv": {
                        "type": "object",
                        "default": {},
                        "description": "Specifies any environment variables your project needs. (Probably mostly for your Workspace Settings.)"
                    },
                    "calva.openBrowserWhenFigwheelStarted": {
                        "type": "boolean",
                        "default": true,
                        "description": "Should Calva open the Figwheel app for you when Figwheel has been started?"
                    },
                    "calva.myLeinProfiles": {
                        "type": "array",
                        "description": "At Jack in, any profiles listed here will be added to the profiles found in the `project.clj` file.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "calva.myCljAliases": {
                        "type": "array",
                        "description": "At Jack in, any aliases listed here will be added to the aliases found in the projects's `deps.edn` file.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "calva.sendAsyncOutputTo": {
                        "type": "string",
                        "description": "The destination for output outside of an evaluation.",
                        "enum": [
                            "REPL Window",
                            "Calva says",
                            "Both"
                        ],
                        "default": "Calva says"
                    },
                    "calva.replConnectSequences": {
                        "type": "array",
                        "description": "For when your project needs a custom REPL connect sequence.",
                        "items": {
                            "type": "object",
                            "required": [
                                "name",
                                "projectType"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "This will show up in the Jack-in quick-pick menu when you start Jack-in if you have more than one sequence configured."
                                },
                                "projectType": {
                                    "type": "string",
                                    "description": "Select one of the project types supported by Calva.",
                                    "enum": [
                                        "Leiningen",
                                        "Clojure CLI",
                                        "shadow-cljs"
                                    ]
                                },
                                "nReplPortFile": {
                                    "type": "array",
                                    "description": "An array of path segments with the project root-releative path to the nREPL port file for this connect sequence. E.g. For shadow-cljs this would be [\".shadow-cljs\", \"nrepl.port\"]",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "afterCLJReplJackInCode": {
                                    "type": "string",
                                    "description": "Here you can give Calva some Clojure code to evaluate in the CLJ REPL, once it has been created.",
                                    "required": false
                                },
                                "menuSelections": {
                                    "type": "object",
                                    "description": "Pre-selected menu options. If a slection is made here. Calva won't prompt for it.",
                                    "properties": {
                                        "leinProfiles": {
                                            "type": "array",
                                            "description": "At Jack-in to a Leiningen project, use these profiles to launch the repl.",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "leinAlias": {
                                            "description": "At Jack-in to a Leiningen project, launch with this alias. Set to null to launch with Calva's default task (a headless repl).",
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "cljAliases": {
                                            "type": "array",
                                            "description": "At Jack-in to a Clojure CLI project, use these aliases to launch the repl.",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "cljsLaunchBuilds": {
                                            "type": "array",
                                            "description": "The cljs builds to start/watch at Jack-in/comnnect.",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "cljsDefaultBuild": {
                                            "type": "string",
                                            "description": "Which cljs build to acttach to at the initial connect."
                                        }
                                    }
                                },
                                "cljsType": {
                                    "description": "Either a built in type, or an object configuring a custom type. If omitted Calva will show a menu with the built-in types.",
                                    "anyOf": [
                                        {
                                            "type": "string",
                                            "enum": [
                                                "Figwheel Main",
                                                "lein-figwheel",
                                                "shadow-cljs",
                                                "Nashorn"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "required": [
                                                "connectCode",
                                                "dependsOn"
                                            ],
                                            "properties": {
                                                "dependsOn": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Figwheel Main",
                                                        "lein-figwheel",
                                                        "shadow-cljs",
                                                        "Nashorn",
                                                        "User provided"
                                                    ],
                                                    "description": "The CLojureScript REPL dependencies this customization needs. NB: If it is `User provided`, then you need to provide the dependencies in the project, or launch with an alias (deps.edn), profile (Leiningen), or build (shadow-cljs) that privides the dependencies needed."
                                                },
                                                "buildsRequired": {
                                                    "type": "boolean",
                                                    "description": "If the repl type requires that builds are started in order to connect to them, set this to true."
                                                },
                                                "isStarted": {
                                                    "type": "boolean",
                                                    "description": "For cljs repls that Calva does not need to start, set this to true. (If you base your custom cljs repl on shadow-cljs workflow, for instance.)"
                                                },
                                                "startCode": {
                                                    "type": "string",
                                                    "description": "Clojure code to be evaluated to create and/or start your custom CLJS REPL."
                                                },
                                                "isReadyToStartRegExp": {
                                                    "type": "string",
                                                    "description": "A regular experession which, when matched in the stdout from the startCode evaluation, will make Calva continue with connecting the REPL, and to prompt the user to start the application. If omitted and there is startCode Calva will continue when that code is evaluated."
                                                },
                                                "openUrlRegExp": {
                                                    "type": "string",
                                                    "description": "A regular expression, matched against the stdout of cljsType evaluations, for extracting the URL with which the app can be started. The expression should have a capturing group named 'url'. E.g. \\”Open URL: (?<url>\\S+)\\”",
                                                    "default": "Open(ing)? URL (?<url>\\S+)"
                                                },
                                                "shouldOpenUrl": {
                                                    "type": "boolean",
                                                    "description": "Choose if Calva should automatically open the URL for you or not."
                                                },
                                                "connectCode": {
                                                    "type": "string",
                                                    "description": "Clojure code to be evaluated to convert the REPL to a CLJS REPL that Calva can use to connect to the application."
                                                },
                                                "isConnectedRegExp": {
                                                    "type": "string",
                                                    "description": "A regular experession which, when matched in the stdout of the connectCode evaluation, will tell Calva that the application is connected.",
                                                    "default": "To quit, type: :cljs/quit"
                                                },
                                                "printThisLineRegExp": {
                                                    "type": "string",
                                                    "description": "A regular experession which, when matched in the stdout from any code evaluations in the cljsType, will make the matched text be printed to the Calva says Output channel."
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            {
                "title": "Paredit",
                "type": "object",
                "properties": {
                    "calva.paredit.defaultKeyMap": {
                        "type": "string",
                        "description": "The default keymap to use for bindings when there is no custom binding.",
                        "default": "original",
                        "enum": [
                            "original",
                            "strict",
                            "none"
                        ],
                        "scope": "window"
                    }
                }
            },
            {
                "title": "Calva-fmt",
                "type": "object",
                "properties": {
                    "calva.fmt.indentation": {
                        "type": "boolean",
                        "default": true,
                        "description": "Correct the indentation of your code?"
                    },
                    "calva.fmt.removeSurroundingWhitespace": {
                        "type": "boolean",
                        "default": true,
                        "description": "Remove whitespace surrounding inner forms? This will convert ( foo ) to (foo)."
                    },
                    "calva.fmt.removeTrailingWhitespace": {
                        "type": "boolean",
                        "default": true,
                        "description": "Remove trailing whitespace in lines? This will convert (foo) \\n to (foo)\\n."
                    },
                    "calva.fmt.insertMissingWhitespace": {
                        "type": "boolean",
                        "default": true,
                        "description": "Insert whitespace missing from between elements? This will convert (foo(bar)) to (foo (bar))."
                    },
                    "calva.fmt.removeConsecutiveBlankLines": {
                        "type": "boolean",
                        "default": false,
                        "description": "Squeeze consecutive blank lines to one?"
                    },
                    "calva.fmt.formatAsYouType": {
                        "type": "boolean",
                        "default": true,
                        "description": "Auto-adjust indentation and format as you type (only on enter, currently)?"
                    },
                    "calva.fmt.newIndentEngine": {
                        "type": "boolean",
                        "default": false,
                        "description": "Help beta test the new indent engine (it is MUCH faster than the previous one)."
                    },
                    "calva.fmt.alignMapItems": {
                        "type": "boolean",
                        "default": false,
                        "description": "Align map items in columns? (Experimental)"
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "calva.togglePrettyPrint",
                "title": "Toggle Pretty Printing for All Evaluations",
                "category": "Calva"
            },
            {
                "command": "calva.jackIn",
                "title": "Start a Project REPL and Connect (aka Jack-In)",
                "category": "Calva"
            },
            {
                "command": "calva.connect",
                "title": "Connect to a Running REPL Server in the Project",
                "category": "Calva"
            },
            {
                "command": "calva.connectNonProjectREPL",
                "title": "Connect to a Running REPL Server, not in Project",
                "category": "Calva"
            },
            {
                "command": "calva.disconnect",
                "title": "Disonnect from the REPL Server",
                "enablement": "calva:connected || calva:connecting",
                "category": "Calva"
            },
            {
                "command": "calva.jackInOrConnect",
                "title": "Jack-in or Connect to REPL Server",
                "enablement": "!calva:connected && !calva:connecting",
                "category": "Calva"
            },
            {
                "command": "calva.openCljReplWindow",
                "title": "Open the Clojure REPL Window",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.openCljsReplWindow",
                "title": "Open the ClojureScript REPL Window",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.clearREPLWindowHistory",
                "title": "Clear history of active REPL window (mainly in case it has been borked)",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.toggleCLJCSession",
                "title": "Toggle the REPL Connection (clj or cljs) used for CLJC Files",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.selectCurrentForm",
                "title": "Select Current Form",
                "category": "Calva"
            },
            {
                "command": "calva.clearInlineResults",
                "title": "Clear Inline Evaluation Results",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateSelection",
                "title": "Evaluate Current Form",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateCurrentTopLevelForm",
                "title": "Evaluate Top Level Form (defun)",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateSelectionReplace",
                "title": "Evaluate Current Form to Result",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateSelectionAsComment",
                "title": "Evaluate Current Form to Comment",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateTopLevelFormAsComment",
                "title": "Evaluate Top Level Form (defun) to Comment",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.copyLastResults",
                "title": "Copy Last Evaluation Result to Clipboard",
                "category": "Calva"
            },
            {
                "command": "calva.loadFile",
                "title": "Load Current File and Dependencies",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.requireREPLUtilities",
                "title": "Require REPL utilities, like (doc) etcetera, into Current Namespace",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.lintFile",
                "title": "Lint Current File",
                "category": "Calva"
            },
            {
                "command": "calva.runNamespaceTests",
                "title": "Run Tests for Current Namespace",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.runAllTests",
                "title": "Run All Tests",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.rerunTests",
                "title": "Run Failing Tests again",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.runTestUnderCursor",
                "title": "Run Current Test",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.loadNamespace",
                "title": "Load Current Namespace in REPL Window",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.setREPLNamespace",
                "title": "Switch Namespace in REPL Window to Current Namespace",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.evalCurrentFormInREPLWindow",
                "title": "Evaluate Current Form in REPL Window",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.evalCurrentTopLevelFormInREPLWindow",
                "title": "Evaluate Top Level Form in REPL Window (defun)",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.switchCljsBuild",
                "title": "Select CLJS Build Connection",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.refresh",
                "title": "Refresh Changed Namespaces",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "command": "calva.refreshAll",
                "title": "Refresh All Namespaces",
                "enablement": "calva:connected",
                "category": "Calva"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.toggle",
                "title": "Toggle"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.forwardSexp",
                "title": "Forward Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.backwardSexp",
                "title": "Backward Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.forwardDownSexp",
                "title": "Down Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.backwardUpSexp",
                "title": "Backward Up Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.forwardUpSexp",
                "title": "Forward Up Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.closeList",
                "title": "Close List"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.rangeForDefun",
                "title": "Select Current Top Level (aka defun) Form"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.sexpRangeExpansion",
                "title": "Expand Selection"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.sexpRangeContraction",
                "title": "Shrink Selection"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.yankForwardSexp",
                "title": "Copy Forward Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.yankBackwardSexp",
                "title": "Copy Backward Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.yankForwardDownSexp",
                "title": "Copy Down Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.yankBackwardUpSexp",
                "title": "Copy Up Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.yankCloseList",
                "title": "Copy Close List"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.yankRangeForDefun",
                "title": "Copy Current Top Level (aka defun) Form"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.cutForwardSexp",
                "title": "Cut Forward Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.cutBackwardSexp",
                "title": "Cut Backward Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.cutForwardDownSexp",
                "title": "Cut Down Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.cutBackwardUpSexp",
                "title": "Cut Up Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.cutCloseList",
                "title": "Cut Close List"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.cutRangeForDefun",
                "title": "Cut Select Current Top Level (aka defun) Form"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.slurpSexpForward",
                "title": "Slurp Sexp Forward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.slurpSexpBackward",
                "title": "Slurp Sexp Backward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.barfSexpForward",
                "title": "Barf Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.barfSexpBackward",
                "title": "Barf Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.spliceSexp",
                "title": "Splice Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.splitSexp",
                "title": "Split Sexp"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.killSexpForward",
                "title": "Kill Sexp Forward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.killSexpBackward",
                "title": "Kill Sexp Backward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.spliceSexpKillForward",
                "title": "Splice & Kill Forward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.spliceSexpKillBackward",
                "title": "Splice & Kill Backward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.deleteForward",
                "title": "Delete Forward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.deleteBackward",
                "title": "Delete Backward"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.wrapAroundParens",
                "title": "Wrap Around ()"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.wrapAroundSquare",
                "title": "Wrap Around []"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.wrapAroundCurly",
                "title": "Wrap Around {}"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.indentRange",
                "title": "Indent"
            },
            {
                "category": "Calva Paredit",
                "command": "paredit.transpose",
                "title": "Transpose"
            },
            {
                "command": "calva-fmt.formatCurrentForm",
                "title": "Format Current Form",
                "category": "Calva Format"
            },
            {
                "command": "calva-fmt.alignCurrentForm",
                "title": "Format and Align Current Form (recursively, experimental)",
                "category": "Calva Format"
            },
            {
                "command": "calva-fmt.inferParens",
                "title": "Infer Parens (from the indentation)",
                "category": "Calva Format"
            },
            {
                "command": "calva-fmt.tabIndent",
                "title": "Indent Line",
                "category": "Calva Format"
            },
            {
                "command": "calva-fmt.tabDedent",
                "title": "Dedent Line",
                "category": "Calva Format"
            }
        ],
        "keybindings": [
            {
                "command": "calva.tellAboutNewChordingKey",
                "key": "ctrl+alt+v",
                "when": "editorLangId == clojure"
            },
            {
                "command": "calva.jackIn",
                "key": "ctrl+alt+c ctrl+alt+j"
            },
            {
                "command": "calva.connect",
                "key": "ctrl+alt+c ctrl+alt+c"
            },
            {
                "command": "calva.connectNonProjectREPL",
                "key": "ctrl+alt+c alt+c"
            },
            {
                "command": "calva.toggleCLJCSession",
                "key": "ctrl+alt+c ctrl+alt+s"
            },
            {
                "command": "calva.switchCljsBuild",
                "key": "ctrl+alt+c ctrl+alt+b"
            },
            {
                "command": "calva.selectCurrentForm",
                "key": "ctrl+alt+c s"
            },
            {
                "command": "calva.clearInlineResults",
                "key": "escape",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !suggestWidgetVisible && !hasOtherSuggestions && !editorHasMultipleSelections"
            },
            {
                "command": "calva.evaluateSelection",
                "key": "ctrl+alt+c e",
                "win": "ctrl+alt+c v"
            },
            {
                "command": "calva.evaluateCurrentTopLevelForm",
                "key": "ctrl+alt+c space"
            },
            {
                "command": "calva.evaluateSelectionReplace",
                "key": "ctrl+alt+c r"
            },
            {
                "command": "calva.evaluateSelectionAsComment",
                "key": "ctrl+alt+c c"
            },
            {
                "command": "calva.evaluateTopLevelFormAsComment",
                "key": "ctrl+alt+c ctrl+space"
            },
            {
                "command": "calva.copyLastResults",
                "key": "ctrl+alt+c ctrl+c"
            },
            {
                "command": "calva.loadFile",
                "key": "ctrl+alt+c enter"
            },
            {
                "command": "calva.togglePrettyPrint",
                "key": "ctrl+alt+c p"
            },
            {
                "command": "calva.requireREPLUtilities",
                "key": "ctrl+alt+c ctrl+u"
            },
            {
                "command": "calva.lintFile",
                "key": "ctrl+alt+c l"
            },
            {
                "command": "calva.runNamespaceTests",
                "key": "ctrl+alt+c t"
            },
            {
                "command": "calva.runAllTests",
                "key": "ctrl+alt+c shift+t"
            },
            {
                "command": "calva.rerunTests",
                "key": "ctrl+alt+c ctrl+t"
            },
            {
                "command": "calva.runTestUnderCursor",
                "key": "ctrl+alt+c ctrl+alt+t"
            },
            {
                "command": "calva.loadNamespace",
                "key": "ctrl+alt+c ctrl+alt+n"
            },
            {
                "command": "calva.setREPLNamespace",
                "key": "ctrl+alt+c alt+n"
            },
            {
                "command": "calva.evalCurrentFormInREPLWindow",
                "key": "ctrl+alt+c ctrl+alt+e",
                "win": "ctrl+alt+c ctrl+alt+v"
            },
            {
                "command": "calva.evalCurrentTopLevelFormInREPLWindow",
                "key": "ctrl+alt+c ctrl+alt+space"
            },
            {
                "command": "paredit.forwardSexp",
                "key": "ctrl+alt+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.backwardSexp",
                "key": "ctrl+alt+left",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.forwardDownSexp",
                "key": "ctrl+down",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.backwardUpSexp",
                "key": "ctrl+up",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.forwardUpSexp",
                "key": "ctrl+alt+up",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.closeList",
                "key": "ctrl+alt+shift+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.rangeForDefun",
                "key": "ctrl+alt+w space",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.sexpRangeExpansion",
                "key": "ctrl+w",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.sexpRangeContraction",
                "key": "ctrl+shift+w",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.yankForwardSexp",
                "key": "ctrl+shift+c ctrl+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.yankBackwardSexp",
                "key": "ctrl+shift+c ctrl+left",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.yankForwardDownSexp",
                "key": "ctrl+shift+c ctrl+down",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.yankBackwardUpSexp",
                "key": "ctrl+shift+c ctrl+up",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.yankCloseList",
                "key": "ctrl+shift+c ctrl+alt+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.yankRangeForDefun",
                "key": "ctrl+shift+c space",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.cutForwardSexp",
                "key": "ctrl+shift+x right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.cutBackwardSexp",
                "key": "ctrl+shift+x left",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.cutForwardDownSexp",
                "key": "ctrl+shift+x down",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.cutBackwardUpSexp",
                "key": "ctrl+shift+x up",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.cutCloseList",
                "key": "ctrl+shift+x ctrl+alt+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.cutRangeForDefun",
                "key": "ctrl+shift+x space",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.slurpSexpForward",
                "key": "ctrl+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.slurpSexpBackward",
                "key": "ctrl+shift+left",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.barfSexpForward",
                "key": "ctrl+left",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.barfSexpBackward",
                "key": "ctrl+shift+right",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.spliceSexp",
                "key": "ctrl+alt+s",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.splitSexp",
                "key": "ctrl+alt+shift+s",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.killSexpForward",
                "key": "ctrl+delete",
                "mac": "ctrl+shift+backspace",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.killSexpBackward",
                "key": "ctrl+backspace",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.spliceSexpKillForward",
                "key": "ctrl+alt+down",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.spliceSexpKillBackward",
                "key": "ctrl+alt+up",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.wrapAroundParens",
                "key": "ctrl+alt+shift+9",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.wrapAroundSquare",
                "key": "ctrl+alt+[",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.wrapAroundCurly",
                "key": "ctrl+alt+shift+[",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.indentRange",
                "key": "ctrl+alt+i",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "paredit.deleteForward",
                "key": "delete",
                "mac": "shift+backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap == strict && editorTextFocus && !editorReadOnly && !editorHasMultipleSelections"
            },
            {
                "command": "paredit.deleteBackward",
                "key": "backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap == strict && editorTextFocus && !editorReadOnly && !editorHasMultipleSelections"
            },
            {
                "command": "deleteRight",
                "key": "ctrl+alt+delete",
                "mac": "alt+shift+backspace",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "deleteLeft",
                "key": "ctrl+alt+backspace",
                "when": "!sideBarFocus && !panelFocus && calva:pareditValid && paredit:keyMap =~ /original|strict/"
            },
            {
                "command": "calva-fmt.formatCurrentForm",
                "key": "tab",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !inSnippetMode && !suggestWidgetVisible && !hasOtherSuggestions"
            },
            {
                "command": "calva-fmt.alignCurrentForm",
                "key": "ctrl+alt+l",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !suggestWidgetVisible && !hasOtherSuggestions"
            },
            {
                "command": "calva-fmt.inferParens",
                "key": "ctrl+alt+p",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !suggestWidgetVisible && !hasOtherSuggestions"
            },
            {
                "command": "calva-fmt.tabIndent",
                "key": "ctrl+i",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !suggestWidgetVisible && !hasOtherSuggestions"
            },
            {
                "command": "calva-fmt.tabDedent",
                "key": "shift+ctrl+i",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !suggestWidgetVisible && !hasOtherSuggestions"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "calva.jackInOrConnect",
                    "when": "false"
                }
            ],
            "editor/context": [
                {
                    "when": "editorLangId == clojure && !calva:connected",
                    "command": "calva.jackInOrConnect",
                    "group": "calva/x-connect"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.disconnect",
                    "group": "calva/x-disconnect"
                },
                {
                    "when": "editorLangId == clojure",
                    "command": "calva.togglePrettyPrint",
                    "group": "calva/y-toggle"
                },
                {
                    "when": "editorLangId == clojure",
                    "command": "calva.selectCurrentForm",
                    "group": "calva/a-eval"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.evaluateSelection",
                    "group": "calva/b-eval"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.evaluateCurrentTopLevelForm",
                    "group": "calva/b-eval"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.evaluateSelectionAsComment",
                    "group": "calva/b-eval"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.evaluateTopLevelFormAsComment",
                    "group": "calva/b-eval"
                },
                {
                    "when": "editorLangId == clojure  && calva:connected",
                    "command": "calva.loadFile",
                    "group": "calva/c-load"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.loadNamespace",
                    "group": "calva/c-load"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.runAllTests",
                    "group": "calva/d-test"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.runNamespaceTests",
                    "group": "calva/d-test"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.rerunTests",
                    "group": "calva/d-test"
                },
                {
                    "when": "editorLangId == clojure && calva:connected",
                    "command": "calva.runTestUnderCursor",
                    "group": "calva/d-test"
                }
            ]
        }
    },
    "scripts": {
        "clean": "rimraf ./out && rimraf ./tsconfig.tsbuildinfo && rimraf ./cljs-out",
        "compile-cljs": "npx shadow-cljs compile :calva-lib :test",
        "prewatch": "npm i && npm run clean && npm run compile-cljs",
        "watch": "concurrently \"webpack --mode development --watch\" \"tsc -watch -p ./tsconfig.json\"",
        "release-cljs": "npx shadow-cljs release :calva-lib",
        "update-grammar": "node ./calva/calva-fmt/update-grammar.js ./calva/calva-fmt/atom-language-clojure/grammars/clojure.cson clojure.tmLanguage.json",
        "release": "npm i && npm run clean && npm run update-grammar && npm run release-cljs && webpack --mode production",
        "postrelease": "rimraf ./out/cljs-lib",
        "vscode:prepublish": "npm run release",
        "bump-version": "npm set git-tag-version false && npm version patch",
        "postinstall": "node ./node_modules/vscode/bin/install"
    },
    "dependencies": {
        "@types/escape-html": "0.0.20",
        "@types/mocha": "^2.2.42",
        "@types/node": "^7.10.6",
        "@types/universal-analytics": "^0.4.2",
        "@types/uuid": "^3.4.4",
        "acorn": "^6.1.1",
        "ansi-to-html": "^0.6.11",
        "escape-html": "^1.0.3",
        "find": "0.2.9",
        "immutable": "3.8.1",
        "immutable-cursor": "2.0.1",
        "jszip": "3.1.3",
        "lodash": "^4.17.14",
        "net": "1.0.2",
        "npm": "^6.10.0",
        "open": "^6.3.0",
        "paredit.js": "^0.3.6",
        "parinfer": "^3.12.0",
        "universal-analytics": "^0.4.20",
        "vscode-extension-telemetry": "0.0.15",
        "wsl-path": "^1.1.0"
    },
    "devDependencies": {
        "concurrently": "^4.1.0",
        "cson-parser": "^4.0.1",
        "css-loader": "^2.1.1",
        "dart-sass-loader": "^1.0.0",
        "eslint": "^4.19.1",
        "eslint-config-standard": "^11.0.0",
        "eslint-plugin-import": "^2.17.3",
        "eslint-plugin-node": "^6.0.1",
        "eslint-plugin-promise": "^3.7.0",
        "eslint-plugin-standard": "^3.0.1",
        "file-loader": "^3.0.1",
        "json": "^9.0.6",
        "node-gyp": "^5.0.0",
        "nodemon": "^1.19.1",
        "rimraf": "^2.7.1",
        "sass": "^1.0.0-beta.3",
        "shadow-cljs": "^2.8.52",
        "style-loader": "^0.23.1",
        "tar": "^4.4.10",
        "ts-loader": "^5.4.5",
        "tslint": "^5.17.0",
        "typescript": "^3.5.1",
        "url-loader": "^1.1.2",
        "vsce": "^1.66.0",
        "vscode": "^1.1.34",
        "webpack": "^4.33.0",
        "webpack-cli": "^3.3.5"
    }
}
