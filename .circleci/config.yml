version: 2
jobs:
  install-deps:
    working_directory: ~/calva
    docker:
      - image: circleci/openjdk:11.0.4-stretch-node
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore_cache:
          name: Restore dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
      - run:
          name: Install node_modules
          command: cp package.json /tmp && npm install && cp /tmp/package.json .
      - run:
          name: Install CLJS dependencies
          command: npx shadow-cljs classpath
      - save_cache:
          name: Save dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
          paths:
            - ./node_modules
            - ~/.m2
  test-grammar:
    working_directory: ~/calva
    environment:
      # Required:
      DISPLAY: ":99"
      # Configurable
      ATOM_LINT_WITH_BUNDLED_NODE: "true"
      APM_TEST_PACKAGES: ""
      ATOM_CHANNEL: "stable"
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          name: Restore dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
      - run:
          name: Update system package lists
          command: sudo apt-get update
      - run:
          name: Install some pre-requisite packages
          command: sudo apt-get --assume-yes --quiet install curl xvfb
      - run:
          name: Start display server for Atom
          command: /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1024x768x16 +extension RANDR
          background: true
      - run:
          name: Download Atom build script
          command: |
            cd calva/calva-fmt/atom-language-clojure
            curl -s -O https://raw.githubusercontent.com/atom/ci/master/build-package.sh
      - run:
          name: Make build script executable
          command: |
            cd calva/calva-fmt/atom-language-clojure
            chmod u+x build-package.sh
      - run:
          name: Run package tests
          command: |
            cd calva/calva-fmt/atom-language-clojure
            ./build-package.sh
      - save_cache:
          name: Save dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
          paths:
            - ~/.atom/packages
            - ./node_modules
  test:
    docker:
      - image: circleci/openjdk:11.0.4-stretch-node
    working_directory: ~/calva
    steps:
      - checkout:
          path: ~/calva
      - restore_cache:
          name: Restore dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
      - run:
          name: Compile and Run Tests
          command: npm run compile-cljs
  build:
    docker:
      - image: circleci/openjdk:11.0.4-stretch-node
    working_directory: ~/calva
    steps:
      - checkout:
          path: ~/calva
      - restore_cache:
          name: Restore dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
      - run:
          name: "Create artifacts workspace"
          command: mkdir /tmp/artifacts
      - run:
          name: Tamper Calva version if not master
          command: |
            VERSION=$(node -p 'require("./package.json").version')
            TAG_VERSION=NO-TAG
            if [[ "${CIRCLE_TAG}" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]
            then
              TAG_VERSION=${BASH_REMATCH[1]}
              echo 'No version tampering because this is a release tag'
            else
              COMMIT=${CIRCLE_SHA1:0:8}
              if [[  "${CIRCLE_TAG}" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)-(.*) ]]
              then
                TAG_VERSION=${BASH_REMATCH[1]}
                TAG_TITLE=${BASH_REMATCH[2]}
                PRERELEASE=${TAG_TITLE}-${COMMIT}
              else
                BRANCH=${CIRCLE_BRANCH//[^[:alnum:]]/-}
                PRERELEASE=${BRANCH}-${COMMIT}
              fi
              echo "Append prerelease to version: -${PRERELEASE}"
              npx json -I -f package.json -e 'this.version=this.version.replace(/$/,"-'${PRERELEASE}'")'
            fi
            if [ ${TAG_VERSION} = NO-TAG -o "${TAG_VERSION}" = "${VERSION}" ]
            then
              VERSION=$(node -p 'require("./package.json").version')
              echo "Using version: ${VERSION}"
            else
              echo >&2 "FATAL! Version missmatch between package.json and tag. Aborting."
              exit 1
            fi
      - run:
          name: Package vsix
          command: npx vsce package
      - run:
          name: Copy vsix
          command: |
            cp *.vsix /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: /tmp
          paths:
            - artifacts
            - env
  github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - checkout:
          path: ~/calva
      - attach_workspace:
          at: /tmp
      - run:
          name: "Publish Release on GitHub"
          command: |
            EXTRA_RELEASE_OPTIONS=""

            if [[ "${CIRCLE_TAG}" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]
            then
              echo "Publishing GitHub Release: ${CIRCLE_TAG}"
            else
              echo "Publishing GitHub Prerelease: ${CIRCLE_TAG}"
              EXTRA_RELEASE_OPTIONS=-prerelease
            fi
            [[ "${CIRCLE_TAG}" =~ ^v([0-9]+\.[0-9]+\.[0-9]+) ]]
            TAG_VERSION=${BASH_REMATCH[1]}
            BODY=$(awk '/^## \['${TAG_VERSION}'\]/, /^ *$/ { gsub(/["$]/, "\\\\&"); print }' ~/calva/CHANGELOG.md | tail -n +2)
            if [ "${IS_LOCAL}" = YES ]
            then
              GHR_CMD=echo
            else
              GHR_CMD=ghr
            fi
            ${GHR_CMD} -t ${GITHUB_TOKEN} ${EXTRA_RELEASE_OPTIONS} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -b "${BODY}" -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} /tmp/artifacts/
  marketplace-publish:
    docker:
      - image: circleci/openjdk:11.0.4-stretch-node
    working_directory: ~/calva
    steps:
      - attach_workspace:
          at: /tmp
      - checkout:
          path: ~/calva
      - restore_cache:
          name: Restore dependencies
          key: ts-{{ checksum "package.json" }}-cljs-{{ checksum "shadow-cljs.edn" }}-grammar-{{ checksum "calva/calva-fmt/atom-language-clojure/package.json" }}
      - run:
          name: Publish to the marketplace
          command: |
            TAGGED_BRANCH=$(git branch --contains tags/${CIRCLE_TAG})
            if [[ "${TAGGED_BRANCH/\*/}" =~ master ]]
            then
              echo "Tag is on master. Proceeding with publish."
            else
              echo >&2 "FATAL! Tag is not on master. Aborting."
              exit 1
            fi

            VSCE_CMD="vsce publish --packagePath /tmp/artifacts/calva-$(node -p 'require("./package.json").version').vsix -p ${PUBLISH_TOKEN}"

            if [ "${IS_LOCAL}" = YES ]
            then
              echo "Dry npx ${VSCE_CMD}"
            else
              npx ${VSCE_CMD}
            fi
workflows:
  version: 2
  # We have two workflows, because for some reason the tag filter need to be on all jobs...
  test-build:
    jobs:
      - install-deps:
          filters:
            tags:
              ignore: /^v\d+\.\d+\.\d+-?.*/
      - test-grammar:
          requires:
            - install-deps
      - test:
          requires:
            - install-deps
      - build:
          requires:
            - test
            - test-grammar
  test-build-release-publish:
    jobs:
      - install-deps:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-?.*/
      - test-grammar:
          requires:
            - install-deps
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-?.*/
      - test:
          requires:
            - install-deps
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-?.*/
      - build:
          requires:
            - test
            - test-grammar
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-?.*/
      - github-release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-?.*/
          context: Calva
      - marketplace-publish:
          requires:
            - github-release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$/
          context: Calva
