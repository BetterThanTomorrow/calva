'scopeName': 'source.clojure'
'fileTypes': [
  'boot'
  'clj'
  'clj.hl'
  'cljc'
  'cljs'
  'cljs.hl'
  'cljx'
  'clojure'
  'edn'
  'org'
  'joke'
  'joker'
]
'foldingStartMarker': '\\(\\s*$'
'foldingStopMarker': '^\\s*\\)'
'firstLineMatch': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/)
    boot
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      clojure(script)?
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      clojure
    (?=\\s|:|$)
  )
'''
'name': 'Clojure'
'patterns': [
  {
    'include': '#comment'
  }
  {
    'include': '#shebang-comment'
  }
  {
    'include': '#prompt'
  }
  {
    'include': '#quoted-sexp'
  }
  {
    'include': '#sexp'
  }
  {
    'include': '#keyfn'
  }
  {
    'include': '#string'
  }
  {
    'include': '#vector'
  }
  {
    'include': '#set'
  }
  {
    'include': '#map'
  }
  {
    'include': '#regexp'
  }
  {
    'include': '#var'
  }
  {
    'include': '#constants'
  }
  {
    'include': '#dynamic-variables'
  }
  {
    'include': '#metadata'
  }
  {
    'include': '#namespace-symbol'
  }
  {
    'include': '#symbol'
  }
]
'repository':
  'comment':
    # NOTE: This must be kept as a begin/end match for language-todo to work
    'begin': '(?<!\\\\);'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.clojure'
    'end': '$'
    'name': 'comment.line.semicolon.clojure'
  'constants':
    'patterns': [
      {
        'match': '(?<=^|\\s|,|\\(|\\[|\\{)(nil)(?=(\\s|,|\\)|\\]|\\}|\\^))'
        'name': 'constant.language.nil.clojure'
      }
      {
        'match': '(?<=^|\\s|,|\\(|\\[|\\{)(true|false)(?=(\\s|,|\\)|\\]|\\}|\\^))'
        'name': 'constant.language.boolean.clojure'
      }
      {
        'match': '(##(?:Inf|-Inf|NaN))'
        'name': 'constant.numeric.symbol.clojure'
      }
      {
        'match': '([-+]?\\d+/\\d+)'
        'name': 'constant.numeric.ratio.clojure'
      }
      {
        # Only Radixes between 2 and 36 are allowed
        'match': '([-+]?(?:(?:3[0-6])|(?:[12]\\d)|[2-9])[rR][0-9A-Za-z]+N?)'
        'name': 'constant.numeric.arbitrary-radix.clojure'
      }
      {
        'match': '([-+]?0[xX][0-9a-fA-F]+N?)'
        'name': 'constant.numeric.hexadecimal.clojure'
      }
      {
        'match': '([-+]?0[0-7]+N?)'
        'name': 'constant.numeric.octal.clojure'
      }
      {
        # The decimal separator is optional only when followed by e, E or M! 
        'match': '([-+]?[0-9]+(?:(\\.|(?=[eEM]))[0-9]*([eE][-+]?[0-9]+)?)M?)'
        'name': 'constant.numeric.double.clojure'
      }
      {
        'match': '([-+]?\\d+N?)'
        'name': 'constant.numeric.long.clojure'
      }
      { # separating the pattern for reuse
        'include': '#keyword'
      }
    ]
  'keyword':
    'match': '(?<=^|\\s|\\(|\\[|\\{):[\\w\\#\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))'
    'name': 'variable.other.constant.clojure'
  'keyfn':
    'patterns': [
      {
        'match': '(?<=^|\\s|\\(|\\[|\\{)(if(-[-\\p{Ll}\\?]*)?|when(-[-\\p{Ll}]*)?|for(-[-\\p{Ll}]*)?|cond|do|let(-[-\\p{Ll}\\?]*)?|binding|loop|recur|fn|throw[\\p{Ll}\\-]*|try|catch|finally|([\\p{Ll}]*case))(?=(\\s|\\)|\\]|\\}))'
        'name': 'storage.control.clojure'
      }
      {
        'match': '(?<=^|\\s|\\(|\\[|\\{)(declare-?|(in-)?ns|import|use|require|load|compile|(def(?!ault)[\\p{Ll}\\-]*))(?=(\\s|\\)|\\]|\\}))'
        'name': 'storage.control.clojure'
      }
    ]
  'dynamic-variables':
    'match': '\\*[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\d]+\\*'
    'name': 'entity.name.variable.dynamic.clojure'
  'map':
    'begin': '(\\{)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.map.begin.clojure'
    'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.section.map.end.trailing.clojure'
      '2':
        'name': 'punctuation.section.map.end.clojure'
    'name': 'meta.map.clojure'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'metadata':
    'patterns': [
      {
        'begin': '(\\^\\{)'
        'beginCaptures':
          '1':
            'name': 'punctuation.section.metadata.map.begin.clojure'
        'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
        'endCaptures':
          '1':
            'name': 'punctuation.section.metadata.map.end.trailing.clojure'
          '2':
            'name': 'punctuation.section.metadata.map.end.clojure'
        'name': 'meta.metadata.map.clojure'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'begin': '(\\^)'
        'end': '(\\s)'
        'name': 'meta.metadata.simple.clojure'
        'patterns': [
          {
            'include': '#keyword'
          }
          {
            'include': '$self'
          }
        ]
      }
    ]
  'quoted-sexp':
    'begin': '([\'``]\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.expression.begin.clojure'
    'end': '(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.expression.end.trailing.clojure'
      '2':
        'name': 'punctuation.section.expression.end.trailing.clojure'
      '3':
        'name': 'punctuation.section.expression.end.clojure'
    'name': 'meta.quoted-expression.clojure'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'regexp':
    'begin': '#"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.regexp.begin.clojure'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.regexp.end.clojure'
    'name': 'string.regexp.clojure'
    'patterns': [
      {
        'include': '#regexp_escaped_char'
      }
    ]
  'regexp_escaped_char':
    'match': '\\\\.'
    'name': 'constant.character.escape.clojure'
  'set':
    'begin': '(\\#\\{)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.set.begin.clojure'
    'end': '(\\}(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.section.set.end.trailing.clojure'
      '2':
        'name': 'punctuation.section.set.end.clojure'
    'name': 'meta.set.clojure'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'sexp':
    'begin': '(\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.expression.begin.clojure'
    'end': '(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.section.expression.end.trailing.clojure'
      '2':
        'name': 'punctuation.section.expression.end.trailing.clojure'
      '3':
        'name': 'punctuation.section.expression.end.clojure'
    'name': 'meta.expression.clojure'
    'patterns': [
      {
        # ns, declare and everything that starts with def* or namespace/def*
        'begin': '(?<=\\()(ns|declare|def(?!ault)[\\w\\d._:+=><!?*-]*|[\\w._:+=><!?*-][\\w\\d._:+=><!?*-]*/def(?!ault)[\\w\\d._:+=><!?*-]*)\\s+'
        'beginCaptures':
          '1':
            'name': 'storage.control.clojure'
        'end': '(?=\\))'
        'name': 'meta.definition.global.clojure'
        'patterns': [
          {
            # there may be some metadata before an actual definition
            'include': '#metadata'
          }
          { # dynamic variables are rendered diferently
            'include': '#dynamic-variables'
          }
          {
            # recognizing a symbol as being defined here
            # copied and pasted from #symbol, screw it
            'match': '([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)'
            'name': 'entity.global.clojure'
          }
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '#keyfn'
      }
      {
        'include': '#constants'
      }
      {
        'include': '#vector'
      }
      {
        'include': '#map'
      }
      {
        'include': '#set'
      }
      {
        'include': '#sexp'
      }
      {
        'match': '(?<=\\()([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)/([^"]+?)(?=\\s|\\))'
        'captures':
          '1':
            'name': 'entity.name.namespace.clojure'
          '2':
            'name': 'entity.name.function.clojure'
      }
      {
        'match': '(?<=\\()([^"]+?)(?=\\s|\\))'
        'captures':
          '1':
            'name': 'entity.name.function.clojure'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '$self'
      }
    ]
  'shebang-comment':
    # NOTE: This must be kept as a begin/end match for language-todo to work
    'begin': '^(#!)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.comment.shebang.clojure'
    'end': '$'
    'name': 'comment.line.shebang.clojure'
  'string':
    'begin': '(?<!\\\\)(")'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.string.begin.clojure'
    'end': '(")'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.string.end.clojure'
    'name': 'string.quoted.double.clojure'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.clojure'
      }
    ]
  'namespace-symbol':
    'patterns': [
      { # copied from #symbol, plus a / at the end. Matches the "app/" part of
        # "app/*config*"
        'match': '([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)/'
        'captures':
          '1':
            'name': 'entity.name.namespace.clojure'
      }
    ]
  'symbol':
    'patterns': [
      {
        'match': '([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)'
        'name': 'entity.name.variable.clojure'
      }
    ]
  'var':
    'match': '(?<=^\\#|[\\s\\(\\[\\{]\\#)\'[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}))'
    'name': 'meta.var.clojure'
  'vector':
    'begin': '(\\[)'
    'beginCaptures':
      '1':
        'name': 'punctuation.section.vector.begin.clojure'
    'end': '(\\](?=[\\}\\]\\)\\s]*(?:;|$)))|(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.section.vector.end.trailing.clojure'
      '2':
        'name': 'punctuation.section.vector.end.clojure'
    'name': 'meta.vector.clojure'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  'prompt':
    'patterns': [
      {
        'match': '^([\\p{L}0-9]+)(꞉)([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*0-9]+)(꞉>)([ ])'
        'captures':
          '1':
            'name': 'keyword.control.prompt.clojure'
          '2':
            'name': 'keyword.control.prompt.clojure'
          '3':
            'name': 'entity.name.namespace.prompt.clojure'
          '4':
            'name': 'keyword.control.prompt.clojure'
      }
    ]
